#!/usr/bin/env bash
set -e

# Script: setup-node
# Purpose: Setup tools for node development
# Dependencies: curl

# Configuration
LOG_PREFIX="[NODE SETUP]"
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# TODO: Move this to main task runner
# Helper functions
log_info() {
  echo -e "${LOG_PREFIX} ${YELLOW}$1${NC}"
}

log_success() {
  echo -e "${LOG_PREFIX} ${GREEN}$1${NC}"
}

log_warn() {
  echo -e "${LOG_PREFIX} ${YELLOW}$1${NC}" >&2
}

log_error() {
  echo -e "${LOG_PREFIX} ${RED}$1${NC}" >&2
}


# --- Main Function ---
main() {
    export NVM_DIR="${NVM_DIR:-$XDG_CONFIG_HOM/nvm}"

    install_nvm
    source_nvm
    ensure_nvm_config
    install_node_lts
    set_default_node
    verify_installation
}

# --- Subfunctions ---

# Installs nvm if it is not already installed.
install_nvm() {
    if [ ! -d "$NVM_DIR" ]; then
        log_info "nvm not found. Installing nvm..."
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
        if [ $? -ne 0 ]; then
            log_error "nvm installation failed. Please check your internet connection or run the curl command manually."
        fi
        log_success "nvm has been installed."
    else
        log_info "nvm is already installed."
    fi
}

# Sources the nvm script to make it available in the current shell.
source_nvm() {
    if [ -s "$NVM_DIR/nvm.sh" ]; then
        # shellcheck source=/dev/null
        . "$NVM_DIR/nvm.sh"
    else
        log_error "Could not find nvm.sh. NVM installation may have failed."
    fi
}

# Ensures nvm is loaded in .zshrc for future terminal sessions.
ensure_nvm_config() {
    # The install script should handle this, but we'll double-check.
    if ! grep -q 'NVM_DIR' "$HOME/.zshrc"; then
        log_info "Adding nvm configuration to ~/.zshrc"
        echo '' >> "$HOME/.zshrc"
        echo '# Node Version Manager (nvm)' >> "$HOME/.zshrc"
        echo 'export NVM_DIR="$XDG_CONFIG_HOME}/nvm"' >> "$HOME/.zshrc"
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm' >> "$HOME/.zshrc"
        echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion' >> "$HOME/.zshrc"
        log_warn "nvm config added to ~/.zshrc. You'll need to restart your terminal for it to take effect."
    else
        log_info "nvm configuration already exists in ~/.zshrc."
    fi
}

# Installs the latest LTS version of Node.js.
install_node_lts() {
    log_info "Installing the latest LTS version of Node.js. This might take a moment..."
    # The output of nvm can be verbose, so we only show errors if any.
    local install_output
    install_output=$(nvm install --lts 2>&1)
    if [ $? -ne 0 ]; then
        # Check if it's already installed
        if [[ $install_output == *"is already installed"* ]]; then
            log_info "Latest LTS version is already installed."
        else
            log_error "Failed to install Node.js LTS. Details:\n$install_output"
        fi
    else
        log_success "Successfully installed the latest LTS version of Node.js."
    fi
}

# Sets the LTS version as the default.
set_default_node() {
    log_info "Setting the default node version to LTS."
    nvm alias default lts/* > /dev/null
    nvm use default > /dev/null
    log_success "Default node version set."
}

# Verifies the final installation.
verify_installation() {
    echo ""
    log_info "Verifying installation..."
    local NODE_VERSION
    NODE_VERSION=$(node -v)
    local NPM_VERSION
    NPM_VERSION=$(npm -v)

    if [ -z "$NODE_VERSION" ] || [ -z "$NPM_VERSION" ]; then
        log_error "Verification failed. Could not find node or npm."
    fi

    log_success "Node.js setup is complete!"
    echo "  -> Node version: ${C_YELLOW}${NODE_VERSION}${C_RESET}"
    echo "  -> npm version:  ${C_YELLOW}${NPM_VERSION}${C_RESET}"
    echo ""
    log_info "Please restart your terminal or run 'source ~/.zshrc' to start using nvm."
}

# --- Script Execution ---
main "$@"
